// import * as React from "react";
// import * as ReactDOM from "react-dom";

import * as d3 from 'd3';
import { Remote, proxy, wrap } from 'comlink';
import * as tf from '@tensorflow/tfjs';
import { unstableGame } from './games';
import RunnerWorker from './runner.worker';
import { uuidv4 } from './uuid';


const width = 500;
const height = 300;

const x = d3.scaleLinear([-2, 2], [0, width]);
const y = d3.scaleLinear([-2, 2], [height, 0]);
const invertPoint = ([x_,y_]) => ([x.invert(x_), y.invert(y_)]);

const xAxis = g => g
    .attr("transform", `translate(0,${height})`)
    .call(d3.axisTop(x).ticks(width / height * 10))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick").filter(d => x.domain().includes(d)).remove());

const yAxis = g => g
    .attr("transform", "translate(-1,0)")
    .call(d3.axisRight(y))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick").filter(d => y.domain().includes(d)).remove());


const q = 10; // The level of detail, e.g., sample every 4 pixels in x and y.
const w = Math.ceil(width / q);
const h = Math.ceil(height / q);
const xLin = tf.linspace(-2, 2, w);
const yLin = tf.linspace(-2, 2, h);
const xx = tf.matMul( tf.ones  ([h, 1]), xLin.reshape([1, w])).flatten();
const yy = tf.matMul( yLin.reshape([h, 1]), tf.ones  ([1, w])).flatten();
const zz = unstableGame(xx, yy);
const gridArr = zz.arraySync();
const start = Math.min(...gridArr);
const end = Math.max(...gridArr);
const interval = Math.abs(end - start);
const numContourLines = 20;
const size = interval / numContourLines;
const grid = {
  x: -q,
  y: -q,
  k: q,
  n: w,
  m: h,
}
const thresholds = d3.range(start, end, size);
const color = d3.scaleSequential(d3.extent(thresholds), d3.interpolateViridis);

// Converts from grid coordinates (indexes) to screen coordinates (pixels).
const transformPoint = ([x, y]) => ([
  grid.x + grid.k * x,
  grid.y + grid.k * y
]);
const transform = ({type, value, coordinates}) => {
  return {type, value, coordinates: coordinates.map(rings => {
    return rings.map(points => {
      return points.map(transformPoint);
    });
  })};
};
console.log(grid)

const contours = d3.contours()
    .size([grid.n, grid.m])
    .thresholds(thresholds)
  (gridArr)
    .map(transform);

const svg = d3.create("svg")
    .attr("viewBox", [0, 0, width, height])
    .style("display", "block")
    .style("cursor", 'pointer')
    .style("margin", "0 -14px");

svg.append("g")
    .attr("fill", "none")
    .attr("stroke", "#000")
    .attr("stroke-opacity", 0.05)
  .selectAll("path")
  .data(contours)
  .join("path")
    .attr("fill", d => color(d.value))
    .attr("d", d3.geoPath())

svg.append("g")
    .call(xAxis)
    .attr("transform", "translate(0," + (height - 10) + ")")

svg.append("g")
    .call(yAxis);

d3.select('#contour').node().append(svg.node());
console.log(svg);

const zip = rows => rows[0].map((_,c) => rows.map(row => row[c]));
// const xs = [-0.9387759566307068,-0.9487749338150024,-0.9787481427192688,-1.0086474418640137,-1.02851402759552,-1.0581765174865723,-1.0876282453536987,-1.1168181896209717,-1.145695686340332,-1.1742111444473267,-1.2023158073425293,-1.2390674352645874,-1.274893045425415,-1.3096832036972046,-1.3350309133529663,-1.3677473068237305,-1.391413688659668,-1.4217171669006348,-1.4504843950271606,-1.4775954484939575,-1.502926230430603,-1.5206785202026367,-1.5425795316696167,-1.562332272529602,-1.5756512880325317,-1.5912988185882568,-1.6043970584869385,-1.6147955656051636,-1.6207327842712402,-1.6260491609573364,-1.6282641887664795,-1.6272450685501099,-1.6242854595184326,-1.617327332496643,-1.6068472862243652,-1.5927817821502686,-1.5750943422317505,-1.5537792444229126,-1.5288631916046143,-1.500406265258789,-1.4685007333755493,-1.4239588975906372,-1.38478422164917,-1.3426530361175537,-1.2977601289749146,-1.250312089920044,-1.2131773233413696,-1.1617721319198608,-1.1084001064300537,-1.053270936012268,-0.9965869188308716,-0.9385408163070679,-0.8793148994445801,-0.8190798163414001,-0.7579946517944336,-0.6962069272994995,-0.6338529586791992,-0.5710581541061401,-0.5079383254051208,-0.4445998966693878,-0.38114121556282043,-0.3335231840610504,-0.270068496465683,-0.20672768354415894,-0.14357507228851318,-0.08068035542964935,-0.018109235912561417,0.04407602548599243,0.10581602901220322,0.16705380380153656,0.22773434221744537,0.2878042161464691,0.3472112715244293,0.4059043526649475,0.4638327956199646,0.5209465622901917,0.5771957039833069,0.6187850832939148,0.6734010577201843,0.7270148992538452,0.7795761227607727,0.8310337662696838,0.8813362717628479,0.9304315447807312,0.9782667756080627,1.0247883796691895,1.0699423551559448,1.1136735677719116,1.1559263467788696,1.206576943397522,1.2547169923782349,1.3002324104309082,1.3346776962280273,1.3751775026321411,1.4054585695266724,1.4337903261184692,1.4663716554641724,1.4900957345962524,1.5116738080978394,1.5264126062393188,1.5481517314910889,1.5594600439071655,1.572463870048523,1.5830470323562622,1.591157078742981,1.5967442989349365,1.599762201309204,1.6001684665679932,1.5979253053665161,1.5913463830947876,1.5805262327194214,1.5687928199768066,1.5543129444122314,1.5370851755142212,1.5171163082122803,1.4944219589233398,1.469027042388916,1.4409655332565308,1.410280704498291,1.3770257234573364,1.3412622213363647,1.3030613660812378,1.2728582620620728,1.2196710109710693,1.1746625900268555,1.1154935359954834,1.065961241722107,1.0014822483062744,0.9479889273643494,0.8789284825325012,0.8220710158348083,0.7639138698577881,0.7045773863792419,0.6441811919212341,0.5673753023147583,0.5050234794616699,0.44198834896087646,0.37838053703308105,0.33036375045776367,0.2660110294818878,0.20137429237365723,0.12032952904701233,0.039181701838970184,-0.02569056861102581,-0.09042653441429138,-0.15494127571582794,-0.21915268898010254,-0.298869788646698,-0.362112432718277,-0.42480283975601196,-0.48686927556991577,-0.5634689331054688,-0.6388527154922485,-0.6981981992721558,-0.7275283336639404,-0.7854641675949097,-0.8423826694488525,-0.8982228636741638,-0.9529249668121338,-1.0064302682876587,-1.0457388162612915,-1.0970104932785034,-1.1469274759292603,-1.1954338550567627,-1.242473840713501,-1.2879924774169922,-1.3319352865219116,-1.3742481470108032,-1.4148774147033691,-1.4537700414657593,-1.490873098373413,-1.526134729385376,-1.5513412952423096,-1.5832562446594238,-1.6131891012191772,-1.6477415561676025,-1.6730334758758545,-1.6961846351623535,-1.7171484231948853,-1.7402082681655884,-1.756087064743042,-1.769637107849121,-1.7808189392089844,-1.7914093732833862,-1.7981743812561035,-1.800791621208191,-1.800895094871521,-1.798461675643921,-1.7934722900390625,-1.7859119176864624,-1.7757704257965088,-1.763042688369751,-1.7477288246154785,-1.7298344373703003,-1.7093713283538818,-1.68020761013031,-1.660815715789795,-1.632777214050293,-1.602278232574463,-1.5693615674972534,-1.534076452255249,-1.4964784383773804,-1.4667986631393433,-1.4463222026824951,-1.4253038167953491,-1.414594292640686,-1.4037526845932007,-1.3704477548599243,-1.3359981775283813,-1.300438404083252,-1.2513600587844849,-1.2004597187042236,-1.1478286981582642,-1.0935612916946411,-1.0377541780471802,-0.9805060029029846,-0.9219164848327637,-0.8771546483039856,-0.8317376971244812,-0.7702363729476929,-0.7077470421791077,-0.6283987164497375,-0.5478569865226746,-0.5153489708900452,-0.46631234884262085,-0.4004800021648407,-0.3342186510562897,-0.25092774629592896,-0.18403209745883942,-0.11699659377336502,-0.049905434250831604,0.01715945266187191,0.08411841839551926,0.15089410543441772,0.2174113541841507,0.2835971713066101,0.3493807017803192,0.41469308733940125,0.4794674813747406,0.5436387658119202,0.607143759727478,0.6699209213256836,0.7319101691246033,0.7930529713630676,0.8532922863960266,0.8978452086448669,0.956369936466217,0.9995746612548828,1.056220531463623,1.1117209196090698,1.1660254001617432,1.2190839052200317,1.2708473205566406,1.3212677240371704,1.3702975511550903,1.417889952659607,1.4639989137649536];
// const ys = [1.0204079151153564,1.0104089975357056,0.9803906083106995,0.9503057599067688,0.930192232131958,0.8999090194702148,0.8694613575935364,0.8388209342956543,0.8079646229743958,0.776874303817749,0.7455368638038635,0.7033548355102539,0.6607090830802917,0.6176013946533203,0.5849736928939819,0.5410878658294678,0.5078991651535034,0.463302880525589,0.41834011673927307,0.373043417930603,0.3274475932121277,0.29307639598846436,0.24704617261886597,0.20082125067710876,0.16604916751384735,0.11958210915327072,0.07303542643785477,0.02645372785627842,-0.008477807976305485,-0.05500863119959831,-0.10144329071044922,-0.14773066341876984,-0.18231770396232605,-0.22821851074695587,-0.27382153272628784,-0.31906843185424805,-0.3638991415500641,-0.408252090215683,-0.4520643353462219,-0.4952718913555145,-0.5378101468086243,-0.5899425745010376,-0.6307369470596313,-0.6706509590148926,-0.7096208930015564,-0.7475837469100952,-0.7753578424453735,-0.8114107251167297,-0.8462903499603271,-0.8799389600753784,-0.9123004674911499,-0.9433203339576721,-0.9729455709457397,-1.0011245012283325,-1.0278069972991943,-1.0529440641403198,-1.0764883756637573,-1.0983933210372925,-1.118613839149475,-1.137105941772461,-1.1538270711898804,-1.1651808023452759,-1.1787043809890747,-1.1903471946716309,-1.2000725269317627,-1.207845687866211,-1.2136340141296387,-1.2174075841903687,-1.2191389799118042,-1.2188042402267456,-1.216382622718811,-1.2118568420410156,-1.205214262008667,-1.1964465379714966,-1.1855496168136597,-1.1725248098373413,-1.1573784351348877,-1.1446332931518555,-1.1258059740066528,-1.104903221130371,-1.0819522142410278,-1.0569859743118286,-1.030043363571167,-1.0011683702468872,-0.9704106450080872,-0.9378246665000916,-0.9034698605537415,-0.8674100041389465,-0.829712986946106,-0.7803987264633179,-0.7287851572036743,-0.6750256419181824,-0.6305793523788452,-0.5733597278594971,-0.5263575911521912,-0.4783579707145691,-0.41708672046661377,-0.3671574592590332,-0.31651055812835693,-0.27810603380203247,-0.21340639889240265,-0.17422959208488464,-0.1216508224606514,-0.06875623762607574,-0.015628140419721603,0.037652093917131424,0.09100405871868134,0.14434833824634552,0.19760644435882568,0.26393985748291016,0.3298680782318115,0.38221997022628784,0.4341438412666321,0.48556607961654663,0.5364139676094055,0.5866154432296753,0.6360992789268494,0.6847951412200928,0.7326333522796631,0.7795451879501343,0.8254627585411072,0.8703190684318542,0.9032250642776489,0.9565844535827637,0.997864305973053,1.0476014614105225,1.0858256816864014,1.1315504312515259,1.1664142608642578,1.2077550888061523,1.2389689683914185,1.26847243309021,1.2962132692337036,1.3221412897109985,1.3519283533096313,1.3736034631729126,1.3933155536651611,1.4110231399536133,1.4229646921157837,1.4370715618133545,1.4490718841552734,1.461061954498291,1.46965491771698,1.4740506410598755,1.4762197732925415,1.4761451482772827,1.4738128185272217,1.467707633972168,1.4602653980255127,1.4505480527877808,1.4385594129562378,1.4203928709030151,1.398716926574707,1.3788743019104004,1.3681272268295288,1.3449989557266235,1.3197184801101685,1.2923223972320557,1.262851357460022,1.2313508987426758,1.2064231634140015,1.171492576599121,1.1346783638000488,1.096041202545166,1.0556449890136719,1.0135564804077148,0.969846248626709,0.9245867133140564,0.8778529167175293,0.8297220468521118,0.7802730202674866,0.729586124420166,0.690807580947876,0.6381511092185974,0.5844829082489014,0.5161020755767822,0.46046289801597595,0.4040836691856384,0.34704792499542236,0.2749566435813904,0.2167469561100006,0.15814903378486633,0.09924408793449402,0.025303548201918602,-0.048836007714271545,-0.10818810760974884,-0.16749243438243866,-0.22667275369167328,-0.2856537699699402,-0.34436118602752686,-0.40272167325019836,-0.4606629014015198,-0.5181135535240173,-0.5750033259391785,-0.6312626600265503,-0.7005963325500488,-0.7416175603866577,-0.7955791354179382,-0.8486424088478088,-0.900742769241333,-0.9518166184425354,-1.0018014907836914,-1.0385385751724243,-1.0626578330993652,-1.086470603942871,-1.098259687423706,-1.1099693775177002,-1.1446130275726318,-1.1785094738006592,-1.2116345167160034,-1.2545604705810547,-1.2960177659988403,-1.335952639579773,-1.374312400817871,-1.4110462665557861,-1.4461044073104858,-1.4794386625289917,-1.5032802820205688,-1.5261070728302002,-1.5549324750900269,-1.5818787813186646,-1.6128581762313843,-1.6407642364501953,-1.6510504484176636,-1.6655278205871582,-1.683032751083374,-1.6984550952911377,-1.7147624492645264,-1.7254011631011963,-1.733876347541809,-1.7401684522628784,-1.7442610263824463,-1.7461408376693726,-1.7457972764968872,-1.7432231903076172,-1.7384144067764282,-1.731370449066162,-1.722093939781189,-1.710591197013855,-1.6968718767166138,-1.680949091911316,-1.6628401279449463,-1.6425652503967285,-1.6201486587524414,-1.5956180095672607,-1.5758514404296875,-1.5476984977722168,-1.5252561569213867,-1.493595004081726,-1.4599871635437012,-1.4244786500930786,-1.3871188163757324,-1.3479596376419067,-1.3070554733276367,-1.2644636631011963,-1.2202435731887817,-1.1744569540023804];
// const data = zip([xs, ys]);

let uuid = null;
let worker: Worker = null;
const updateInterval = 500;
let prevPoint = null;
const updateTrajectory = (xs, ys, uuid_) => {
  if (uuid != uuid_) {
    return;
  }
  xs.unshift(prevPoint[0]);
  ys.unshift(prevPoint[1]);
  prevPoint = [xs[xs.length - 1], ys[ys.length - 1]];

  const dataStrip = zip([xs, ys]);
  const line = d3.line()
    .x(d => x(d[0]))
    .y(d => y(d[1]))
    .curve(d3.curveNatural)
  
  const path = svg.append("path")
    .attr("class", "trajectory")
    .attr("d", line(dataStrip))
    .attr("stroke", "red")
    .attr("stroke-width", "2")
    .attr("fill", "none");
  
  const totalLength = path.node().getTotalLength();
  
  path
    .attr("stroke-dasharray", totalLength + " " + totalLength)
    .attr("stroke-dashoffset", totalLength)
    .transition()
      .duration(updateInterval)
      .ease(d3.easeLinear)
      .attr("stroke-dashoffset", 0);
  };
    
svg
  .on('click', function () {
    // Clean up previous paths 
    svg.selectAll(".trajectory").remove();

    const mouse = d3.mouse(this);
    const [x,y] = invertPoint(mouse);
    prevPoint = [x, y];
    console.log([x, y]);

    // make initial animation
    const circle = svg.append("circle")
    .attr("class", "trajectory")
    .attr("cx", mouse[0])
    .attr("cy", mouse[1])
    .style("fill", "red")
    .attr("r",8)
    .style("opacity", 0)
    .transition()
      .duration(500)
      .style("opacity", 1)
      .ease(d3.easeExpIn)
      .attr("r", 3)
    
    if (worker != null) worker.terminate();

    worker = new RunnerWorker();
    uuid = uuidv4();
    const workerApi = wrap<import('./runner.worker').RunnerWorker>(worker);
    workerApi.run(x, y, 0.01, 1000, updateInterval, proxy(updateTrajectory), uuid);
  });


// ReactDOM.render(<App/>, document.getElementById('root'));


// TODO: 
// update environment
  // clear currently running trajectory if any
// update learning rate
// choose methods
  // run multiple methods
// Stop button

// TODO:
// Fix overlapping Axis
// Fix overflowing borders
// Fix weird corner
// Fix trajectory connecting wierdly
// Fix trajectory lacking connection
